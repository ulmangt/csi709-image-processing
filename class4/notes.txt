divmod() -- for horizontal and vertical coords





, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]])
>>> res[0]
array([[  62.        ,  142.10526316,  162.73684211],
       [  59.16071429,  136.75      ,  156.46428571],
       [  67.33333333,  152.29166667,  171.08333333]])
>>> res[1]
[[30, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]]
>>> res[2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> res = kmeans.KMeans( 3, data.transpose() )
Difference 0.0
>>> res
(array([[ 136.,  134.,  136.,  136.,  135.,  135.,  137.,  136.,  136.,
         136.,  136.,  136.,  136.,  136.,  136.,  136.,  135.,  135.,
         135.,  135.,  135.,  135.,  135.,  135.,  135.,  135.,  136.,
         136.,  138.,  139.,  140.,  139.,  138.,  137.,  136.,  136.,
         136.,  137.,  138.,  136.,  136.,  137.,  137.,  137.,  138.,
         138.,  138.,  139.,  139.,  140.,  140.,  140.,  139.,  139.,
         138.,  141.,  140.,  140.,  139.,  139.,  140.,  140.,  140.,
         141.,  142.,  142.,  143.,  143.,  143.,  143.,  143.,  144.,
         144.,  145.,  146.,  147.,  148.,  148.,  149.,  153.,  152.,
         150.,  150.,  150.,  150.,  152.,  152.,  152.,  152.,  152.,
         154.,  154.,  155.,  155.,  156.,  156.,  156.,  156.,  156.],
       [ 156.,  154.,  156.,  156.,  155.,  155.,  157.,  156.,  156.,
         156.,  156.,  156.,  156.,  156.,  156.,  156.,  155.,  155.,
         155.,  155.,  155.,  155.,  155.,  155.,  155.,  155.,  156.,
         156.,  158.,  159.,  160.,  159.,  158.,  157.,  156.,  156.,
         156.,  157.,  158.,  156.,  156.,  157.,  157.,  157.,  158.,
         158.,  158.,  157.,  157.,  158.,  158.,  158.,  157.,  157.,
         156.,  161.,  160.,  160.,  159.,  159.,  160.,  160.,  160.,
         162.,  163.,  163.,  164.,  164.,  164.,  164.,  164.,  165.,
         165.,  166.,  167.,  168.,  169.,  169.,  170.,  170.,  169.,
         170.,  170.,  171.,  171.,  173.,  173.,  173.,  173.,  172.,
         171.,  171.,  170.,  170.,  171.,  173.,  173.,  173.,  173.],
       [  59.,   57.,   59.,   59.,   58.,   58.,   60.,   59.,   59.,
          59.,   59.,   59.,   59.,   59.,   59.,   58.,   57.,   57.,
          57.,   57.,   57.,   57.,   57.,   57.,   57.,   57.,   58.,
          58.,   60.,   61.,   62.,   61.,   60.,   59.,   58.,   58.,
          58.,   59.,   60.,   58.,   58.,   59.,   59.,   59.,   60.,
          60.,   60.,   62.,   62.,   63.,   63.,   63.,   62.,   62.,
          61.,   63.,   62.,   62.,   61.,   61.,   62.,   62.,   62.,
          60.,   61.,   61.,   62.,   62.,   62.,   62.,   62.,   62.,
          62.,   63.,   64.,   65.,   66.,   66.,   67.,   67.,   66.,
          65.,   65.,   65.,   65.,   67.,   67.,   67.,   67.,   67.,
          68.,   68.,   69.,   69.,   70.,   70.,   70.,   70.,   70.]]), [[1], [2], [0]])
>>> res.shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'shape'
>>> res[0]
array([[ 136.,  134.,  136.,  136.,  135.,  135.,  137.,  136.,  136.,
         136.,  136.,  136.,  136.,  136.,  136.,  136.,  135.,  135.,
         135.,  135.,  135.,  135.,  135.,  135.,  135.,  135.,  136.,
         136.,  138.,  139.,  140.,  139.,  138.,  137.,  136.,  136.,
         136.,  137.,  138.,  136.,  136.,  137.,  137.,  137.,  138.,
         138.,  138.,  139.,  139.,  140.,  140.,  140.,  139.,  139.,
         138.,  141.,  140.,  140.,  139.,  139.,  140.,  140.,  140.,
         141.,  142.,  142.,  143.,  143.,  143.,  143.,  143.,  144.,
         144.,  145.,  146.,  147.,  148.,  148.,  149.,  153.,  152.,
         150.,  150.,  150.,  150.,  152.,  152.,  152.,  152.,  152.,
         154.,  154.,  155.,  155.,  156.,  156.,  156.,  156.,  156.],
       [ 156.,  154.,  156.,  156.,  155.,  155.,  157.,  156.,  156.,
         156.,  156.,  156.,  156.,  156.,  156.,  156.,  155.,  155.,
         155.,  155.,  155.,  155.,  155.,  155.,  155.,  155.,  156.,
         156.,  158.,  159.,  160.,  159.,  158.,  157.,  156.,  156.,
         156.,  157.,  158.,  156.,  156.,  157.,  157.,  157.,  158.,
         158.,  158.,  157.,  157.,  158.,  158.,  158.,  157.,  157.,
         156.,  161.,  160.,  160.,  159.,  159.,  160.,  160.,  160.,
         162.,  163.,  163.,  164.,  164.,  164.,  164.,  164.,  165.,
         165.,  166.,  167.,  168.,  169.,  169.,  170.,  170.,  169.,
         170.,  170.,  171.,  171.,  173.,  173.,  173.,  173.,  172.,
         171.,  171.,  170.,  170.,  171.,  173.,  173.,  173.,  173.],
       [  59.,   57.,   59.,   59.,   58.,   58.,   60.,   59.,   59.,
          59.,   59.,   59.,   59.,   59.,   59.,   58.,   57.,   57.,
          57.,   57.,   57.,   57.,   57.,   57.,   57.,   57.,   58.,
          58.,   60.,   61.,   62.,   61.,   60.,   59.,   58.,   58.,
          58.,   59.,   60.,   58.,   58.,   59.,   59.,   59.,   60.,
          60.,   60.,   62.,   62.,   63.,   63.,   63.,   62.,   62.,
          61.,   63.,   62.,   62.,   61.,   61.,   62.,   62.,   62.,
          60.,   61.,   61.,   62.,   62.,   62.,   62.,   62.,   62.,
          62.,   63.,   64.,   65.,   66.,   66.,   67.,   67.,   66.,
          65.,   65.,   65.,   65.,   67.,   67.,   67.,   67.,   67.,
          68.,   68.,   69.,   69.,   70.,   70.,   70.,   70.,   70.]])
>>> res[1]
[[1], [2], [0]]
>>> res[2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> data = zip( r.flatten()[1:100], g.flatten()[1:100], b.flatten()[1:100] )
>>> data = numpy.array(data)
>>> data
array([[ 59, 136, 156],
       [ 57, 134, 154],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 58, 135, 155],
       [ 58, 135, 155],
       [ 60, 137, 157],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 59, 136, 156],
       [ 58, 136, 156],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 57, 135, 155],
       [ 58, 136, 156],
       [ 58, 136, 156],
       [ 60, 138, 158],
       [ 61, 139, 159],
       [ 62, 140, 160],
       [ 61, 139, 159],
       [ 60, 138, 158],
       [ 59, 137, 157],
       [ 58, 136, 156],
       [ 58, 136, 156],
       [ 58, 136, 156],
       [ 59, 137, 157],
       [ 60, 138, 158],
       [ 58, 136, 156],
       [ 58, 136, 156],
       [ 59, 137, 157],
       [ 59, 137, 157],
       [ 59, 137, 157],
       [ 60, 138, 158],
       [ 60, 138, 158],
       [ 60, 138, 158],
       [ 62, 139, 157],
       [ 62, 139, 157],
       [ 63, 140, 158],
       [ 63, 140, 158],
       [ 63, 140, 158],
       [ 62, 139, 157],
       [ 62, 139, 157],
       [ 61, 138, 156],
       [ 63, 141, 161],
       [ 62, 140, 160],
       [ 62, 140, 160],
       [ 61, 139, 159],
       [ 61, 139, 159],
       [ 62, 140, 160],
       [ 62, 140, 160],
       [ 62, 140, 160],
       [ 60, 141, 162],
       [ 61, 142, 163],
       [ 61, 142, 163],
       [ 62, 143, 164],
       [ 62, 143, 164],
       [ 62, 143, 164],
       [ 62, 143, 164],
       [ 62, 143, 164],
       [ 62, 144, 165],
       [ 62, 144, 165],
       [ 63, 145, 166],
       [ 64, 146, 167],
       [ 65, 147, 168],
       [ 66, 148, 169],
       [ 66, 148, 169],
       [ 67, 149, 170],
       [ 67, 153, 170],
       [ 66, 152, 169],
       [ 65, 150, 170],
       [ 65, 150, 170],
       [ 65, 150, 171],
       [ 65, 150, 171],
       [ 67, 152, 173],
       [ 67, 152, 173],
       [ 67, 152, 173],
       [ 67, 152, 173],
       [ 67, 152, 172],
       [ 68, 154, 171],
       [ 68, 154, 171],
       [ 69, 155, 170],
       [ 69, 155, 170],
       [ 70, 156, 171],
       [ 70, 156, 173],
       [ 70, 156, 173],
       [ 70, 156, 173],
       [ 70, 156, 173]], dtype=uint8)
>>> res = kmeans.KMeans( 3, data.transpose() )
Difference 0.0
>>> res = kmeans.KMeans( 3, data )
Difference 11.2537993921
Difference 4.47628818316
Difference 0.0
>>> res
(array([[  67.2       ,  152.04      ,  170.92      ],
       [  58.48888889,  136.13333333,  156.08888889],
       [  61.89655172,  140.89655172,  160.79310345]]), [[74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54], [29, 30, 31, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73]])
>>> res[0]
array([[  67.2       ,  152.04      ,  170.92      ],
       [  58.48888889,  136.13333333,  156.08888889],
       [  61.89655172,  140.89655172,  160.79310345]])
>>> res[1]
[[74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54], [29, 30, 31, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73]]
>>> res[1][0]
[74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]
>>> res[1][1]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54]
>>> res[1][2]
[29, 30, 31, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73]
>>> res[1][3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
>>> data = zip( r.flatten()[1:1000], g.flatten()[1:1000], b.flatten()[1:1000] )
>>> data = numpy.array(data)
>>> res = kmeans.KMeans( 3, data )
Difference 151.712229527
Difference 95.7840586808
Difference 23.7259413479
Difference 13.9400136784
Difference 8.15796796342
Difference 3.32607542358
Difference 0.0
>>> data[1]
array([ 57, 134, 154], dtype=uint8)
>>> data[0]
array([ 59, 136, 156], dtype=uint8)
>>> res[0]
array([[  68.00327869,  153.24262295,  171.08852459],
       [ 143.56132075,  220.08254717,  225.49056604],
       [  86.4037037 ,  183.23703704,  196.73333333]])
>>> res[1]

>>> res[1][0]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 314]
>>> res[1][1]
[565, 566, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998]
>>> res[1][2]
[304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576]
>>> 










Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "copyright", "credits" or "license()" for more information.

    ****************************************************************
    Personal firewall software may warn about the connection IDLE
    makes to its subprocess using this computer's internal loopback
    interface.  This connection is not visible on any external
    interface and no data is sent to or received from the Internet.
    ****************************************************************
    
IDLE 2.6.5      
>>> a = [1,2,3]
>>> b = [5,6,7]
>>> c = a.append(b)
>>> c
>>> c
>>> a.append(b)
>>> print a.append(b)
None
>>> c.append(a)

Traceback (most recent call last):
  File "<pyshell#7>", line 1, in <module>
    c.append(a)
AttributeError: 'NoneType' object has no attribute 'append'
>>> c = []
>>> c = a + b
>>> c
[1, 2, 3, [5, 6, 7], [5, 6, 7], [5, 6, 7], 5, 6, 7]
>>> c = []
>>> c = a + b
>>> c
[1, 2, 3, [5, 6, 7], [5, 6, 7], [5, 6, 7], 5, 6, 7]
>>> d = a + b
>>> d
[1, 2, 3, [5, 6, 7], [5, 6, 7], [5, 6, 7], 5, 6, 7]
>>> a
[1, 2, 3, [5, 6, 7], [5, 6, 7], [5, 6, 7]]
>>> a = [1,2,3]
>>> b = [5,6,7]
>>> a + b
[1, 2, 3, 5, 6, 7]
>>> from numpy import indices
>>> v,h = indices ( 10, 10 )

Traceback (most recent call last):
  File "<pyshell#21>", line 1, in <module>
    v,h = indices ( 10, 10 )
  File "/usr/lib/python2.6/dist-packages/numpy/core/numeric.py", line 1270, in indices
    dimensions = tuple(dimensions)
TypeError: 'int' object is not iterable
>>> v,h = indices ( ( 10, 10 ) )
>>> v,h = indices ( ( 10, 10 ) )
>>> v
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
       [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
       [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
       [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
       [6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
       [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
       [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
       [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]])
>>> h
array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])
>>> sqrt( v**2 + h**2 )

Traceback (most recent call last):
  File "<pyshell#26>", line 1, in <module>
    sqrt( v**2 + h**2 )
NameError: name 'sqrt' is not defined
>>> from numpy import sqrt
>>> sqrt( v**2 + h**2 )
array([[  0.        ,   1.        ,   2.        ,   3.        ,
          4.        ,   5.        ,   6.        ,   7.        ,
          8.        ,   9.        ],
       [  1.        ,   1.41421356,   2.23606798,   3.16227766,
          4.12310563,   5.09901951,   6.08276253,   7.07106781,
          8.06225775,   9.05538514],
       [  2.        ,   2.23606798,   2.82842712,   3.60555128,
          4.47213595,   5.38516481,   6.32455532,   7.28010989,
          8.24621125,   9.21954446],
       [  3.        ,   3.16227766,   3.60555128,   4.24264069,
          5.        ,   5.83095189,   6.70820393,   7.61577311,
          8.54400375,   9.48683298],
       [  4.        ,   4.12310563,   4.47213595,   5.        ,
          5.65685425,   6.40312424,   7.21110255,   8.06225775,
          8.94427191,   9.8488578 ],
       [  5.        ,   5.09901951,   5.38516481,   5.83095189,
          6.40312424,   7.07106781,   7.81024968,   8.60232527,
          9.43398113,  10.29563014],
       [  6.        ,   6.08276253,   6.32455532,   6.70820393,
          7.21110255,   7.81024968,   8.48528137,   9.21954446,
         10.        ,  10.81665383],
       [  7.        ,   7.07106781,   7.28010989,   7.61577311,
          8.06225775,   8.60232527,   9.21954446,   9.89949494,
         10.63014581,  11.40175425],
       [  8.        ,   8.06225775,   8.24621125,   8.54400375,
          8.94427191,   9.43398113,  10.        ,  10.63014581,
         11.3137085 ,  12.04159458],
       [  9.        ,   9.05538514,   9.21954446,   9.48683298,
          9.8488578 ,  10.29563014,  10.81665383,  11.40175425,
         12.04159458,  12.72792206]])
>>> sqrt( (v-4)**2 + (h-6)**2 )
array([[ 7.21110255,  6.40312424,  5.65685425,  5.        ,  4.47213595,
         4.12310563,  4.        ,  4.12310563,  4.47213595,  5.        ],
       [ 6.70820393,  5.83095189,  5.        ,  4.24264069,  3.60555128,
         3.16227766,  3.        ,  3.16227766,  3.60555128,  4.24264069],
       [ 6.32455532,  5.38516481,  4.47213595,  3.60555128,  2.82842712,
         2.23606798,  2.        ,  2.23606798,  2.82842712,  3.60555128],
       [ 6.08276253,  5.09901951,  4.12310563,  3.16227766,  2.23606798,
         1.41421356,  1.        ,  1.41421356,  2.23606798,  3.16227766],
       [ 6.        ,  5.        ,  4.        ,  3.        ,  2.        ,
         1.        ,  0.        ,  1.        ,  2.        ,  3.        ],
       [ 6.08276253,  5.09901951,  4.12310563,  3.16227766,  2.23606798,
         1.41421356,  1.        ,  1.41421356,  2.23606798,  3.16227766],
       [ 6.32455532,  5.38516481,  4.47213595,  3.60555128,  2.82842712,
         2.23606798,  2.        ,  2.23606798,  2.82842712,  3.60555128],
       [ 6.70820393,  5.83095189,  5.        ,  4.24264069,  3.60555128,
         3.16227766,  3.        ,  3.16227766,  3.60555128,  4.24264069],
       [ 7.21110255,  6.40312424,  5.65685425,  5.        ,  4.47213595,
         4.12310563,  4.        ,  4.12310563,  4.47213595,  5.        ],
       [ 7.81024968,  7.07106781,  6.40312424,  5.83095189,  5.38516481,
         5.09901951,  5.        ,  5.09901951,  5.38516481,  5.83095189]])
>>> sqrt( (v-4)**2 + (h-6)**2 ) < 4
array([[False, False, False, False, False, False, False, False, False,
        False],
       [False, False, False, False,  True,  True,  True,  True,  True,
        False],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False, False,  True,  True,  True,  True,  True,
        False],
       [False, False, False, False, False, False, False, False, False,
        False],
       [False, False, False, False, False, False, False, False, False,
        False]], dtype=bool)
>>> sqrt( (v-4)**2 + (h-6)**2 ) < 4
array([[False, False, False, False, False, False, False, False, False,
        False],
       [False, False, False, False,  True,  True,  True,  True,  True,
        False],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False,  True,  True,  True,  True,  True,  True,
         True],
       [False, False, False, False,  True,  True,  True,  True,  True,
        False],
       [False, False, False, False, False, False, False, False, False,
        False],
       [False, False, False, False, False, False, False, False, False,
        False]], dtype=bool)
>>> ( sqrt( (v-4)**2 + (h-6)**2 ) < 4 ).astype( int )
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
       [0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
>>> import sophia

Traceback (most recent call last):
  File "<pyshell#33>", line 1, in <module>
    import sophia
ImportError: No module named sophia
>>> import os, sys
>>> os.chdir( "/home/ulman/CSI709
	  
SyntaxError: EOL while scanning string literal
>>> os.chdir( "/home/ulman/CSI709/csi709-image-processing/class4/" )
>>> sys.path.append( "lib" )
>>> d = random.radf( (3,3 ) )

Traceback (most recent call last):
  File "<pyshell#38>", line 1, in <module>
    d = random.radf( (3,3 ) )
NameError: name 'random' is not defined
>>> import numpy
>>> d = numpy.random.radf( (3,3 ) )

Traceback (most recent call last):
  File "<pyshell#40>", line 1, in <module>
    d = numpy.random.radf( (3,3 ) )
AttributeError: 'module' object has no attribute 'radf'
>>> d = numpy.random.randf( (3,3 ) )

Traceback (most recent call last):
  File "<pyshell#41>", line 1, in <module>
    d = numpy.random.randf( (3,3 ) )
AttributeError: 'module' object has no attribute 'randf'
>>> d = numpy.random.randf( (3,3 ) )import numpy
SyntaxError: invalid syntax
>>> import numpy.random
>>> d = numpy.random.randf( (3,3 ) )import numpy
SyntaxError: invalid syntax
>>> d = random.randf( (3,3 ) )import numpy
SyntaxError: invalid syntax
>>> d = random.randf( (3,3 ) )

Traceback (most recent call last):
  File "<pyshell#46>", line 1, in <module>
    d = random.randf( (3,3 ) )
NameError: name 'random' is not defined
>>> d = random.randf( (3,3 ) )

Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    d = random.randf( (3,3 ) )
NameError: name 'random' is not defined
>>> d = numpy.random.randf( (3,3 ) )

Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    d = numpy.random.randf( (3,3 ) )
AttributeError: 'module' object has no attribute 'randf'
>>> d = numpy.random.ranf( (3,3 ) )
>>> A = numpy.dot( d, d.transpose() )
>>> import Image
>>> im = Image.open( "/home
		 
SyntaxError: EOL while scanning string literal
>>> import Image
>>> im = Image.open( "/home/ulman/Pictures/MaroRPG.jpg" )
>>> import sophia

Traceback (most recent call last):
  File "<pyshell#55>", line 1, in <module>
    import sophia
ImportError: No module named sophia
>>> import Sophia

Traceback (most recent call last):
  File "<pyshell#56>", line 1, in <module>
    import Sophia
ImportError: No module named Sophia
>>> import sophia

Traceback (most recent call last):
  File "<pyshell#57>", line 1, in <module>
    import sophia
ImportError: No module named sophia
>>> os.chdir( "/home/ulman/CSI709/csi709-image-processing/" )
>>> sys.path.append( "lib" )
>>> imc = sophia.Image2Cube( im )

Traceback (most recent call last):
  File "<pyshell#60>", line 1, in <module>
    imc = sophia.Image2Cube( im )
NameError: name 'sophia' is not defined
>>> import sophia

Traceback (most recent call last):
  File "<pyshell#61>", line 1, in <module>
    import sophia
ImportError: No module named sophia
>>> os.chdir( "/home/ulman/CSI709/csi709-image-processing/" )
>>> sys.path.append( "lib" )
>>> import sophia

Traceback (most recent call last):
  File "<pyshell#64>", line 1, in <module>
    import sophia
ImportError: No module named sophia
>>> sys.path
['/home/ulman', '/usr/bin', '/usr/lib/python2.6', '/usr/lib/python2.6/plat-linux2', '/usr/lib/python2.6/lib-tk', '/usr/lib/python2.6/lib-old', '/usr/lib/python2.6/lib-dynload', '/usr/lib/python2.6/dist-packages', '/usr/lib/python2.6/dist-packages/Numeric', '/usr/lib/python2.6/dist-packages/PIL', '/usr/lib/python2.6/dist-packages/gst-0.10', '/usr/lib/pymodules/python2.6', '/usr/lib/python2.6/dist-packages/gtk-2.0', '/usr/lib/pymodules/python2.6/gtk-2.0', '/usr/lib/python2.6/dist-packages/wx-2.8-gtk2-unicode', '/usr/local/lib/python2.6/dist-packages', 'lib', 'lib', 'lib']
>>> sys.path.append( "/home/ulman/CSI709/csi709-image-processing/lib")
>>> import sophia
>>> imc = sophia.Image2Cube( im )
>>> imc
(array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8), array([[141, 136, 134, ..., 148, 148, 148],
       [141, 137, 134, ..., 148, 148, 148],
       [142, 138, 135, ..., 148, 148, 148],
       ..., 
       [ 84,  84,  84, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75]], dtype=uint8), array([[161, 156, 154, ..., 167, 167, 167],
       [161, 157, 154, ..., 167, 167, 167],
       [162, 158, 155, ..., 167, 167, 167],
       ..., 
       [112, 112, 112, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100]], dtype=uint8))
>>> imc[0]
array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8)
>>> imc[0][0][0]
64
>>> imc[0]
array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8)
>>> imc[1]
array([[141, 136, 134, ..., 148, 148, 148],
       [141, 137, 134, ..., 148, 148, 148],
       [142, 138, 135, ..., 148, 148, 148],
       ..., 
       [ 84,  84,  84, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75]], dtype=uint8)
>>> imc[2]
array([[161, 156, 154, ..., 167, 167, 167],
       [161, 157, 154, ..., 167, 167, 167],
       [162, 158, 155, ..., 167, 167, 167],
       ..., 
       [112, 112, 112, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100]], dtype=uint8)
>>> imc[3]

Traceback (most recent call last):
  File "<pyshell#76>", line 1, in <module>
    imc[3]
IndexError: tuple index out of range
>>> imc[0][:]
array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8)
>>> imc
(array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8), array([[141, 136, 134, ..., 148, 148, 148],
       [141, 137, 134, ..., 148, 148, 148],
       [142, 138, 135, ..., 148, 148, 148],
       ..., 
       [ 84,  84,  84, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75]], dtype=uint8), array([[161, 156, 154, ..., 167, 167, 167],
       [161, 157, 154, ..., 167, 167, 167],
       [162, 158, 155, ..., 167, 167, 167],
       ..., 
       [112, 112, 112, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100]], dtype=uint8))
>>> imc[:][1]
array([[141, 136, 134, ..., 148, 148, 148],
       [141, 137, 134, ..., 148, 148, 148],
       [142, 138, 135, ..., 148, 148, 148],
       ..., 
       [ 84,  84,  84, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75]], dtype=uint8)
>>> imc[:][1][1]
array([141, 137, 134, ..., 148, 148, 148], dtype=uint8)
>>> imc[:][:][1]
array([[141, 136, 134, ..., 148, 148, 148],
       [141, 137, 134, ..., 148, 148, 148],
       [142, 138, 135, ..., 148, 148, 148],
       ..., 
       [ 84,  84,  84, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75]], dtype=uint8)
>>> imc[:][0][0]
array([64, 59, 57, ..., 67, 67, 67], dtype=uint8)
>>> imc[0][0][:]
array([64, 59, 57, ..., 67, 67, 67], dtype=uint8)
>>> imc[0][0][0]
64
>>> imc[1][0][0]
141
>>> imc[2][0][0]
161
>>> imc[:][0][0]
array([64, 59, 57, ..., 67, 67, 67], dtype=uint8)
>>> imc[4][0][0]

Traceback (most recent call last):
  File "<pyshell#88>", line 1, in <module>
    imc[4][0][0]
IndexError: tuple index out of range
>>> size( imc )

Traceback (most recent call last):
  File "<pyshell#89>", line 1, in <module>
    size( imc )
NameError: name 'size' is not defined
>>> dim( imc )

Traceback (most recent call last):
  File "<pyshell#90>", line 1, in <module>
    dim( imc )
NameError: name 'dim' is not defined
>>> numpy.dim( imc )

Traceback (most recent call last):
  File "<pyshell#91>", line 1, in <module>
    numpy.dim( imc )
AttributeError: 'module' object has no attribute 'dim'
>>> r,g,b= sophia.Image2Cube( im )
>>> r
array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8)
>>> r.shape()

Traceback (most recent call last):
  File "<pyshell#94>", line 1, in <module>
    r.shape()
TypeError: 'tuple' object is not callable
>>> r.shape
(1600, 2560)
>>> r
array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8)
>>> g
array([[141, 136, 134, ..., 148, 148, 148],
       [141, 137, 134, ..., 148, 148, 148],
       [142, 138, 135, ..., 148, 148, 148],
       ..., 
       [ 84,  84,  84, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75],
       [ 85,  85,  85, ...,  75,  75,  75]], dtype=uint8)
>>> b
array([[161, 156, 154, ..., 167, 167, 167],
       [161, 157, 154, ..., 167, 167, 167],
       [162, 158, 155, ..., 167, 167, 167],
       ..., 
       [112, 112, 112, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100],
       [111, 111, 111, ..., 100, 100, 100]], dtype=uint8)
>>> r
array([[64, 59, 57, ..., 67, 67, 67],
       [64, 60, 57, ..., 67, 67, 67],
       [65, 61, 58, ..., 67, 67, 67],
       ..., 
       [ 7,  7,  7, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1],
       [ 8,  8,  8, ...,  1,  1,  1]], dtype=uint8)
>>> r.shape()

Traceback (most recent call last):
  File "<pyshell#100>", line 1, in <module>
    r.shape()
TypeError: 'tuple' object is not callable
>>> r.shape
(1600, 2560)
>>> r.flatten()
array([64, 59, 57, ...,  1,  1,  1], dtype=uint8)
>>> r.flatten().shape
(4096000,)
>>> range( 4096000 )

